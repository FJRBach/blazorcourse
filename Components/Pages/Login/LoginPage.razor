@page "/login"
@attribute [AllowAnonymous]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using WebAppBach.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager

<PageTitle>Iniciar Sesión</PageTitle>

<div class="row justify-content-center">
    <div class="col-lg-5 col-md-8">
        <div class="card shadow-sm">
            <div class="card-body">
                <h3 class="card-title text-center mb-4">Iniciar Sesión</h3>

                <EditForm Model="Input" OnValidSubmit="HandleLogin" FormName="login">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />

                    <div class="mb-3">
                        <label for="email" class="form-label">Correo Electrónico</label>
                        <InputText id="email" class="form-control" @bind-Value="Input.Email" autocomplete="username" />
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Contraseña</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="Input.Password" autocomplete="current-password" />
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>

                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary">Iniciar Sesión</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    // Usamos el ValidationSummary para mostrar los errores, por lo que una lista separada ya no es necesaria.

    private async Task HandleLogin()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, isPersistent: false, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            // Modificamos el estado del EditContext para mostrar un error general en el ValidationSummary.
            var editContext = new EditContext(Input);
            var validationMessageStore = new ValidationMessageStore(editContext);
            validationMessageStore.Add(editContext.Field(nameof(Input.Email)), "Credenciales no válidas.");
            editContext.NotifyValidationStateChanged();
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "El correo es obligatorio.")]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}