@page "/register"
@attribute [AllowAnonymous]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using WebAppBach.Data

@inject UserManager<ApplicationUser> UserManager

@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager

<PageTitle>Registro de Usuario</PageTitle>

<div class="row justify-content-center">
    <div class="col-lg-5 col-md-8">
        <div class="card shadow-sm">
            <div class="card-body">
                <h3 class="card-title text-center mb-4">Crear una Cuenta</h3>

                <EditForm Model="Input" OnValidSubmit="HandleRegistration" FormName="register">
                    <DataAnnotationsValidator />

                    @if (errors.Any())
                    {
                        <div class="alert alert-danger">
                            <ul class="mb-0">
                                @foreach (var error in errors)
                                {
                                    <li>@error</li>
                                }
                            </ul>
                        </div>
                    }

                    <div class="mb-3">
                        <label for="firstName" class="form-label">Nombre</label>
                        <InputText id="firstName" class="form-control" @bind-Value="Input.FirstName" />
                        <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="email" class="form-label">Correo Electrónico</label>
                        <InputText id="email" class="form-control" @bind-Value="Input.Email" />
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Contraseña</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="Input.Password" />
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirmar Contraseña</label>
                        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="Input.ConfirmPassword" />
                        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                    </div>

                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary">Registrar</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private List<string> errors = new();

    private async Task HandleRegistration()
    {
        errors.Clear();
        var user = new ApplicationUser
        {
            UserName = Input.Email,
            Email = Input.Email,
            FirstName = Input.FirstName
        };

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (result.Succeeded)
        {
            // Asigna el rol "User" por defecto.
            await UserManager.AddToRoleAsync(user, "User");

            // Inicia sesión con el nuevo usuario
            await SignInManager.SignInAsync(user, isPersistent: false);

            // Redirige a la página principal
            NavigationManager.NavigateTo("/");
        }
        else
        {
            foreach (var error in result.Errors)
            {
                errors.Add(error.Description);
            }
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "El nombre es obligatorio.")]
        public string FirstName { get; set; } = "";

        [Required(ErrorMessage = "El correo es obligatorio.")]
        [EmailAddress(ErrorMessage = "El formato del correo no es válido.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        [StringLength(100, ErrorMessage = "La {0} debe tener al menos {2} y como máximo {1} caracteres de longitud.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "La contraseña y la confirmación no coinciden.")]
        public string ConfirmPassword { get; set; } = "";
    }
}